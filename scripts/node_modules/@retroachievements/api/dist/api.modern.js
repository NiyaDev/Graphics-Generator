const e="https://retroachievements.org/API",t=(e,t,s,o={})=>{let r=`${e}/${t}`.replaceAll(/([^:]\/)\/+/g,"$1");const n={z:s.username,y:s.webApiKey};for(const[e,t]of Object.entries(o))r.includes(`:${e}`)?r=r.replace(`:${e}`,String(t)):void 0!==t&&(n[e]=String(t));return`${r}?${new URLSearchParams(n).toString()}`};var s,o;const r=null!=(s=null==(o=process.env)?void 0:o.PACKAGE_VERSION)?s:"Unknown",n=async e=>{const{url:t}=e,s=new Headers({"User-Agent":`RetroAchievements-api-js/${r}`}),o=await fetch(t,{headers:s});if(!o.ok)throw new Error(`HTTP Error: Status ${o.status} ${o.statusText}`);return await o.json()};function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var o in s)Object.prototype.hasOwnProperty.call(s,o)&&(e[o]=s[o])}return e},a.apply(this,arguments)}const i=(e,t={})=>{const{shouldCastToNumbers:s,shouldMapToBooleans:o}=t;let r=e;if(Array.isArray(e)){const s=[];for(const o of e)s.push(i(o,t));r=s}else if(!Array.isArray(e)&&e instanceof Object){let n={};for(const[r,c]of Object.entries(e)){let e=c;null!=s&&s.includes(r)&&(e=null===c?null:Number(c)),null!=o&&o.includes(r)&&(e=null===c?null:"1"===String(c)),n=a({},n,{[u(r)]:i(e,t)})}r=n}return r},u=e=>{if(e.toUpperCase()===e)return e.toLowerCase();let t=e.charAt(0).toLowerCase()+e.slice(1);return t=t.replaceAll("ID","Id"),t=t.replaceAll("URL","Url"),t=t.replaceAll("rA","ra"),t=t.replaceAll("visibleUserawards","visibleUserAwards"),t},c=async(s,o)=>{const{achievementId:r,offset:a,count:u}=o,c={a:r};a&&(c.o=a),u&&(c.c=u);const l=t(e,"/API_GetAchievementUnlocks.php",s,c),d=await n({url:l});return i(d,{shouldCastToNumbers:["ID","Points","TrueRatio","RAPoints","RASoftcorePoints"],shouldMapToBooleans:["HardcoreMode"]})},l={game:1,achievement:2,user:3},d=async(s,o)=>{const{identifier:r,kind:a,offset:u,count:c}=o,d={i:r};if(a)d.t=l[a];else if("number"==typeof r)throw new TypeError("'kind' must be specified when looking up an achievement or game.");u&&(d.o=u),c&&(d.c=c);const m=t(e,"/API_GetComments.php",s,d),h=await n({url:m});return i(h,{shouldCastToNumbers:["Count","Total"]})},m=async(s,o)=>{let r;null!=o&&o.shouldOnlyRetrieveActiveSystems&&(r=a({},r,{a:1})),null!=o&&o.shouldOnlyRetrieveGameSystems&&(r=a({},r,{g:1}));const u=t(e,"/API_GetConsoleIDs.php",s,r),c=await n({url:u});return i(c,{shouldCastToNumbers:["ID"]})},h=async(s,o)=>{const{consoleId:r,shouldOnlyRetrieveGamesWithAchievements:u,shouldRetrieveGameHashes:c}=o;let l={i:r};void 0!==u&&(l=a({},l,{f:u?1:0})),c&&(l=a({},l,{h:c?1:0}));const d=t(e,"/API_GetGameList.php",s,l),m=await n({url:d});return i(m,{shouldCastToNumbers:["ID","ConsoleID"]})},p=async s=>{const o=t(e,"/API_GetAchievementOfTheWeek.php",s),r=await n({url:o});return i(r,{shouldCastToNumbers:["ID","Points","TrueRatio","TotalPlayers","RAPoints","RASoftcorePoints","UnlocksCount"],shouldMapToBooleans:["HardcoreMode"]})},A=async s=>{const o=t(e,"/API_GetActiveClaims.php",s),r=await n({url:o});return i(r,{shouldMapToBooleans:["UserIsJrDev"]})},I=async(s,o)=>{const{claimKind:r}=o,a=t(e,"/API_GetClaims.php",s,{k:P[r]}),u=await n({url:a});return i(u,{shouldMapToBooleans:["UserIsJrDev"]})},P={completed:"1",dropped:"2",expired:"3"},v=async(s,o)=>{const r={};null!=o&&o.startDate&&(r.d=o.startDate),null!=o&&o.offset&&(r.o=o.offset),null!=o&&o.count&&(r.c=o.count),null!=o&&o.desiredAwardKinds&&(r.k=o.desiredAwardKinds.join(","));const a=t(e,"/API_GetRecentGameAwards.php",s,r),u=await n({url:a});return i(u)},y=async s=>{const o=t(e,"/API_GetTopTenUsers.php",s),r=await n({url:o}),a=[];for(const e of r)a.push({username:e[1],totalPoints:Number(e[2]),totalRatioPoints:Number(e[3])});return a};var f,T,w;!function(e){e[e.NewSet=0]="NewSet",e[e.Revision=1]="Revision"}(f||(f={})),function(e){e[e.Active=0]="Active",e[e.Complete=1]="Complete",e[e.Dropped=2]="Dropped"}(T||(T={})),function(e){e[e.Primary=0]="Primary",e[e.Collaboration=1]="Collaboration"}(w||(w={}));const G=async(s,o)=>{const{gameId:r}=o,a=t(e,"/API_GetAchievementCount.php",s,{i:r}),u=await n({url:a});return i(u)},b=async(s,o)=>{const{gameId:r,flags:a,hardcore:i}=o,u={i:r};void 0!==a&&(u.f=a),void 0!==i&&(u.h=!0===i?1:0);const c=t(e,"/API_GetAchievementDistribution.php",s,u);return await n({url:c})},C=async(s,o)=>{const{gameId:r}=o,a=t(e,"/API_GetGame.php",s,{i:r}),u=await n({url:a});return i(u,{shouldCastToNumbers:["ID","ForumTopicID","ConsoleID","Flags"]})},D=async(s,o)=>{const{gameId:r,isRequestingUnofficialAchievements:a}=o,u={i:r};a&&(u.f=5);const c=t(e,"/API_GetGameExtended.php",s,u),l=await n({url:c});return i(l,{shouldCastToNumbers:["ID","NumAwarded","NumAwardedHardcore","Points","TrueRatio","DisplayOrder","NumDistinctPlayersCasual","NumDistinctPlayersHardcore"]})},g=async(s,o)=>{const{gameId:r}=o,a=t(e,"/API_GetGameHashes.php",s,{i:r}),u=await n({url:a});return i(u)},N=async(s,o)=>{const{gameId:r,type:a}=o,u=t(e,"/API_GetGameRankAndScore.php",s,{g:r,t:"latest-masters"===a?1:0}),c=await n({url:u});return i(c,{shouldCastToNumbers:["TotalScore"]})},U=async(s,o)=>{const{gameId:r}=o,a=t(e,"/API_GetGameRating.php",s,{i:r}),u=await n({url:a});return i(u)};var S,_;async function R(s,o={}){const r=M(o),a=t(e,"/API_GetTicketData.php",s,r),u=await n({url:a});return i(u,{shouldCastToNumbers:["ID","AchievementID","Points","GameID","ReportType","ReportState","OpenTickets"],shouldMapToBooleans:["Hardcore"]})}!function(e){e[e.CoreAchievements=3]="CoreAchievements",e[e.UnofficialAchievements=5]="UnofficialAchievements"}(S||(S={})),function(e){e.Primary="0",e.Collaboration="1"}(_||(_={}));const M=e=>{const{ticketId:t,isGettingMostTicketedGames:s,username:o,gameId:r,isGettingTicketsForUnofficialAchievements:n,shouldReturnTicketsList:a,achievementId:i}=e;let u={};return void 0!==t?u.i=t:s?(u.f="1",u=H(u,e)):o?u.u=o:r?(u.g=r,n&&(u.f="5"),a&&(u.d="1")):i?u.a=i:u=H(u,e),u},H=(e,t)=>{const s=a({},e);return void 0!==t.count&&(s.c=t.count),void 0!==t.offset&&(s.o=t.offset),s},k=async(s,o)=>{const{username:r,fromDate:a,toDate:u}=o,c=t(e,"/API_GetAchievementsEarnedBetween.php",s,{u:r,f:(a.getTime()/1e3).toFixed(0),t:(u.getTime()/1e3).toFixed(0)}),l=await n({url:c});return i(l,{shouldCastToNumbers:["AchievementID","Points","GameID"],shouldMapToBooleans:["HardcoreMode"]})},O=async(s,o)=>{const{username:r,onDate:a}=o,u=t(e,"/API_GetAchievementsEarnedOnDay.php",s,{u:r,d:`${a.getFullYear()}-${a.getMonth()+1}-${a.getDate()}`}),c=await n({url:u});return i(c,{shouldCastToNumbers:["AchievementID","Points","GameID"],shouldMapToBooleans:["HardcoreMode"]})},B=async(s,o)=>{const{gameId:r,username:a,shouldIncludeHighestAwardMetadata:u}=o,c={g:r,u:a};u&&(c.a=1);const l=t(e,"/API_GetGameInfoAndUserProgress.php",s,c),d=await n({url:l});return i(d,{shouldCastToNumbers:["ID","NumAwarded","NumAwardedHardcore","Points","TrueRatio","DisplayOrder","NumDistinctPlayersCasual","NumDistinctPlayersHardcore"]})},$=async(s,o)=>{const{username:r}=o,a=t(e,"/API_GetUserAwards.php",s,{u:r}),u=await n({url:a});return i(u)},j=async(s,o)=>{const{username:r}=o,a=t(e,"/API_GetUserClaims.php",s,{u:r}),u=await n({url:a});return i(u,{shouldCastToNumbers:["ID","GameID","ClaimType","SetType","Status","Extension","Special","MinutesLeft"]})},E=async(s,o)=>{const{username:r}=o,a=t(e,"/API_GetUserCompletedGames.php",s,{u:r}),u=await n({url:a});return i(u,{shouldCastToNumbers:["GameID","ConsoleID","MaxPossible","NumAwarded","PctWon"],shouldMapToBooleans:["HardcoreMode"]})},K=async(s,o)=>{const{username:r,offset:a,count:u}=o,c={u:r};a&&(c.o=a),u&&(c.c=u);const l=t(e,"/API_GetUserCompletionProgress.php",s,c),d=await n({url:l});return i(d)},L=async(s,o)=>{const{gameId:r,username:a}=o,u=t(e,"/API_GetUserGameRankAndScore.php",s,{g:r,u:a}),c=await n({url:u});return i(c,{shouldCastToNumbers:["TotalScore","UserRank"]})},x=async(s,o)=>{const{username:r}=o,a=t(e,"/API_GetUserPoints.php",s,{u:r}),u=await n({url:a});return i(u)},F=async(s,o)=>{const{username:r}=o,a=t(e,"/API_GetUserProfile.php",s,{u:r}),u=await n({url:a});return i(u,{shouldCastToNumbers:["TotalPoints","TotalSoftcorePoints","TotalTruePoints","Permissions"],shouldMapToBooleans:["Untracked","UserWallActive"]})},W=async(s,o)=>{const{username:r,gameIds:a}=o,u=t(e,"/API_GetUserProgress.php",s,{u:r,i:a.join(",")}),c=await n({url:u});return i(c,{shouldCastToNumbers:["NumPossibleAchievements","PossibleScore","NumAchieved","ScoreAchieved","NumAchievedHardcore","ScoreAchievedHardcore"]})},z=async(s,o)=>{const{username:r,recentMinutes:a}=o,u={u:r};void 0!==a&&(u.m=a);const c=t(e,"/API_GetUserRecentAchievements.php",s,u),l=await n({url:c});return i(l,{shouldMapToBooleans:["HardcoreMode"]})},q=async(s,o)=>{const{username:r,offset:a,count:u}=o,c={u:r};void 0!==a&&(c.o=a),void 0!==u&&(c.c=u);const l=t(e,"/API_GetUserRecentlyPlayedGames.php",s,c),d=await n({url:l});return i(d,{shouldCastToNumbers:["GameID","ConsoleID","NumPossibleAchievements","PossibleScore","NumAchieved","ScoreAchieved","NumAchievedHardcore","ScoreAchievedHardcore","MyVote"]})},J=async(s,o)=>{const{username:r,recentGamesCount:a,recentAchievementsCount:u}=o,c={u:r};void 0!==a&&(c.g=a),void 0!==u&&(c.a=u);const l=t(e,"/API_GetUserSummary.php",s,c),d=await n({url:l});return i(d,{shouldCastToNumbers:["GameID","ConsoleID","ID","LastGameID","ForumTopicID","activitytype","ContribCount","ContribYield","TotalPoints","TotalSoftcorePoints","TotalTruePoints","Permissions","NumPossibleAchievements","PossibleScore","NumAchieved","ScoreAchieved","NumAchievedHardcore","ScoreAchievedHardcore","Points","SoftcorePoints"],shouldMapToBooleans:["Untracked","UserWallActive","IsAwarded","HardcoreAchieved"]})},V=async(s,o)=>{const r={};r.u=o.username,null!=o&&o.offset&&(r.o=o.offset),null!=o&&o.count&&(r.c=o.count);const a=t(e,"/API_GetUserWantToPlayList.php",s,r),u=await n({url:a});return i(u)},Y=e=>{if(!e.username||!e.webApiKey)throw new Error('\n      buildAuthorization() requires an object containing a\n      username and webApiKey. eg:\n\n      const authorization = buildAuthorization({\n        username: "myUserName",\n        webApiKey: "myWebApiKey"\n      })\n    ');return e};export{S as AchievementDistributionFlags,f as ClaimSetType,T as ClaimStatus,w as ClaimType,Y as buildAuthorization,G as getAchievementCount,b as getAchievementDistribution,p as getAchievementOfTheWeek,c as getAchievementUnlocks,k as getAchievementsEarnedBetween,O as getAchievementsEarnedOnDay,A as getActiveClaims,I as getClaims,d as getComments,m as getConsoleIds,C as getGame,D as getGameExtended,g as getGameHashes,B as getGameInfoAndUserProgress,h as getGameList,N as getGameRankAndScore,U as getGameRating,v as getRecentGameAwards,R as getTicketData,y as getTopTenUsers,$ as getUserAwards,j as getUserClaims,E as getUserCompletedGames,K as getUserCompletionProgress,L as getUserGameRankAndScore,x as getUserPoints,F as getUserProfile,W as getUserProgress,z as getUserRecentAchievements,q as getUserRecentlyPlayedGames,J as getUserSummary,V as getUserWantToPlayList,n as unsafe_call};
//# sourceMappingURL=api.modern.js.map
